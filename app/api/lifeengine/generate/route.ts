import { NextResponse } from "next/server";
import { generatePlan } from "@/lib/ai/planner";
import { verifyAndPatch } from "@/lib/ai/verifier";
import type { Intake } from "@/lib/domain/intake";
import type { Plan } from "@/lib/domain/plan";
import { createId } from "@/lib/utils/ids";

type PlanRecord = {
  plan: Plan;
  warnings: string[];
  analytics: Plan["analytics"];
  profileId: string;
  createdAt: number;
  intake: Intake;
};

const globalState = globalThis as unknown as {
  __LIFEENGINE_RUNTIME__?: {
    plans: Map<string, PlanRecord>;
  };
};

if (!globalState.__LIFEENGINE_RUNTIME__) {
  globalState.__LIFEENGINE_RUNTIME__ = {
    plans: new Map<string, PlanRecord>(),
  };
}

const PLAN_STORE = globalState.__LIFEENGINE_RUNTIME__.plans;

export async function POST(request: Request) {
  const { intake } = await request.json();
  if (!intake) {
    return NextResponse.json({ error: "Missing intake payload" }, { status: 400 });
  }

  const generated = await generatePlan(intake);
  const verified = verifyAndPatch(generated, intake as Intake);

  verified.plan.meta = verified.plan.meta || {};
  if (!verified.plan.meta.title) {
    verified.plan.meta.title = "TH+ Personalised Plan";
  }
  if (!verified.plan.meta.summary) {
    verified.plan.meta.summary = "Auto-generated by TH+ LifeEngine Verbal Edition.";
  }

  const planId = createId();
  PLAN_STORE.set(planId, {
    plan: verified.plan,
    warnings: verified.warnings,
    analytics: verified.analytics,
    profileId: (intake as Intake).profileId,
    createdAt: Date.now(),
    intake,
  });

  return NextResponse.json({
    planId,
    plan: verified.plan,
    warnings: verified.warnings,
    analytics: verified.analytics,
  });
}
