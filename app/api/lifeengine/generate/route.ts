import { NextResponse } from "next/server";
import { generatePlan } from "@/lib/ai/geminiPlanner";
import { verifyAndPatch } from "@/lib/ai/verifier";
import type { Intake } from "@/lib/domain/intake";
import type { Plan } from "@/lib/domain/plan";
import { createId } from "@/lib/utils/ids";
import { db } from "@/lib/utils/db";

export async function POST(request: Request) {
  const { intake } = await request.json();
  if (!intake) {
    return NextResponse.json({ error: "Missing intake payload" }, { status: 400 });
  }

  const generated = await generatePlan(intake);
  const verified = verifyAndPatch(generated, intake as Intake);

  verified.plan.meta = verified.plan.meta || {};
  if (!verified.plan.meta.title) {
    verified.plan.meta.title = "TH+ Personalised Plan";
  }
  if (!verified.plan.meta.summary) {
    verified.plan.meta.summary = "Auto-generated by TH+ LifeEngine Verbal Edition.";
  }

  const planId = createId();
  const planRecord = {
    planId,
    profileId: (intake as Intake).profileId,
    days: verified.plan.meta?.duration_days || 7,
    confidence: verified.analytics?.confidence || 0.8,
    warnings: verified.warnings,
    planJSON: verified.plan,
    createdAt: new Date().toISOString(),
  };

  try {
    await db.savePlan(planRecord);
  } catch (error) {
    console.error("Error saving plan:", error);
    return NextResponse.json({ error: "Failed to save plan" }, { status: 500 });
  }

  return NextResponse.json({
    planId,
    plan: verified.plan,
    warnings: verified.warnings,
    analytics: verified.analytics,
  });
}
